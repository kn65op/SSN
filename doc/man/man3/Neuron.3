.TH "Neuron< T, ActivationFunction >" 3 "Thu Apr 5 2012" "SSN" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Neuron< T, ActivationFunction > \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Neuron\&.h>\fP
.PP
Inherits \fBInput< T >\fP, and \fBOutput< T >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBNeuron\fP ()"
.br
.ti -1c
.RI "\fBNeuron\fP (T lf)"
.br
.ti -1c
.RI "\fBNeuron\fP (\fBActivationFunction\fP fun)"
.br
.ti -1c
.RI "\fBNeuron\fP (\fBActivationFunction\fP fun, T lf)"
.br
.ti -1c
.RI "void \fBcalculateOutput\fP ()"
.br
.ti -1c
.RI "void \fBlearnDelta\fP ()"
.br
.ti -1c
.RI "void \fBpropagateAnswer\fP ()"
.br
.ti -1c
.RI "void \fBlearnBP\fP ()"
.br
.ti -1c
.RI "void \fBcheckWages\fP ()"
.br
.ti -1c
.RI "void \fBsetLinkIn\fP (\fBLink\fP< T > *link)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class T, class ActivationFunction = StepActivationFunction<T>()>class Neuron< T, ActivationFunction >"
Klasa \fBNeuron\fP odpowiada neuronowi w sieci neuronowej\&. Podana funkcja aktywacji jest klasą zawierającą metody: operator() za pomocą, której jest wyliczane pobudzenie neuronu oraz deriterative(T x) pozwalającą na wyznaczenie pochodnej funkcji aktywacji w punkcie x (jest to niezbędne do realizacji procesu uczenia się sieci)\&. Współczynnik uczenia jest ustalony na sztywno na 0\&.7 (co z tym idzie aby sieć mogła się uczyć nie należy używać liczb całkowytych)\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class T , class ActivationFunction  = StepActivationFunction<T>()> \fBNeuron\fP< T, \fBActivationFunction\fP >::\fBNeuron\fP ()\fC [inline]\fP"Konstruktor domyślny z ustawieniem współczynnika uczenia z funkcją aktywacji, która jest funkcją skokową i skoku w punkcie 0\&. Współczynnik uczenie ustawiony jest na 0\&.7\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlf\fP Współczynnik uczenia\&. 
.RE
.PP

.SS "template<class T , class ActivationFunction  = StepActivationFunction<T>()> \fBNeuron\fP< T, \fBActivationFunction\fP >::\fBNeuron\fP (Tlf)\fC [inline]\fP"Konstruktor parametryczny z ustawieniem współczynnika uczenia oraz z funkcją aktywacji, która jest funkcją skokową i skoku w punkcie 0\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlf\fP Współczynnik uczenia\&. 
.RE
.PP

.SS "template<class T , class ActivationFunction  = StepActivationFunction<T>()> \fBNeuron\fP< T, \fBActivationFunction\fP >::\fBNeuron\fP (\fBActivationFunction\fPfun)\fC [inline]\fP"Konstruktor parametryczny z ustawieniem funkcji aktywacji\&. Jako współczynnik uczenia ustawione jest 0\&.7\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfun\fP Funkcja aktywacji\&. 
.RE
.PP

.SS "template<class T , class ActivationFunction  = StepActivationFunction<T>()> \fBNeuron\fP< T, \fBActivationFunction\fP >::\fBNeuron\fP (\fBActivationFunction\fPfun, Tlf)\fC [inline]\fP"Konstruktor parametryczny z ustawieniem funkcji aktywacji i współczynnika uczenia\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfun\fP Funkcja aktywacji\&. 
.br
\fIlf\fP Współczynnik uczenia\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<class T , class ActivationFunction  = StepActivationFunction<T>()> void \fBNeuron\fP< T, \fBActivationFunction\fP >::\fBcalculateOutput\fP ()\fC [inline]\fP"Funkcja licząca wyjście neuronu w zależności od wejsć (suma ważone) a następnie przejście przez funkcję aktywacji\&. 
.SS "template<class T , class ActivationFunction  = StepActivationFunction<T>()> void \fBNeuron\fP< T, \fBActivationFunction\fP >::\fBlearnBP\fP ()\fC [inline]\fP"Funkcja ucząca wg reguły Back Propagation dla warstw ukrytych\&. 
.SS "template<class T , class ActivationFunction  = StepActivationFunction<T>()> void \fBNeuron\fP< T, \fBActivationFunction\fP >::\fBlearnDelta\fP ()\fC [inline]\fP"Funkcja ucząca wg reguły delta\&. Stosowana tylko dla sieci jednowarstwowych\&. 
.PP
\fBParameters:\fP
.RS 4
\fIanswer\fP Wymagana odpowiedź dla danego neuronu\&. 
.RE
.PP

.SS "template<class T , class ActivationFunction  = StepActivationFunction<T>()> void \fBNeuron\fP< T, \fBActivationFunction\fP >::\fBpropagateAnswer\fP ()\fC [inline]\fP"Funkcja propagująca błąd do głębszych warstw sieci\&. 
.SS "template<class T , class ActivationFunction  = StepActivationFunction<T>()> void \fBNeuron\fP< T, \fBActivationFunction\fP >::\fBsetLinkIn\fP (\fBLink\fP< T > *link)\fC [inline]\fP"Funkcja ustawiająca połączenie wejściowe oraz dodające nową wagę\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlink\fP Połączenie do ododania\&. 
.RE
.PP

.PP
Reimplemented from \fBOutput< T >\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for SSN from the source code\&.
